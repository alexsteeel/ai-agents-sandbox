{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git reset:*)",
      "Bash(git add:*)",
      "Bash(chmod:*)",
      "Bash(ls:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:apidog.com)",
      "Bash(docker:*)",
      "Bash(./.devcontainer/setup-pycharm.sh:*)",
      "Bash(nc:*)",
      "Bash(ssh:*)",
      "Bash(true)",
      "Bash(./.devcontainer/initialize.sh:*)",
      "Bash(./.devcontainer/update-proxy-filter.sh:*)",
      "Bash(env)",
      "WebFetch(domain:containers.dev)",
      "Bash(./build_image.sh:*)",
      "Bash(curl:*)",
      "WebFetch(domain:3proxy.ru)",
      "Bash(./initialize.sh:*)",
      "Bash(grep:*)",
      "Bash(DOCKER_HOST= docker compose -f .devcontainer/docker-compose.yaml build devcontainer)",
      "Bash(DOCKER_HOST= docker compose -f .devcontainer/docker-compose.yaml down)",
      "Bash(DOCKER_HOST= docker compose -f .devcontainer/docker-compose.yaml up -d)",
      "Bash(DOCKER_HOST= docker compose -f .devcontainer/docker-compose.yaml down tinyproxy)",
      "Bash(DOCKER_HOST= docker compose -f .devcontainer/docker-compose.yaml up -d tinyproxy)",
      "Bash(./build.sh)",
      "Bash(mkdir:*)",
      "Bash(DOCKER_HOST= docker compose down)",
      "Bash(DOCKER_HOST= docker compose up -d)",
      "Bash(./build.sh:*)",
      "Bash(DOCKER_HOST= docker compose build devcontainer)",
      "Bash(DOCKER_HOST= docker compose up -d --force-recreate devcontainer)",
      "Bash(DOCKER_HOST= docker compose up -d --force-recreate tinyproxy)",
      "Bash(cat:*)",
      "Bash(DOCKER_HOST= docker compose up -d devcontainer)",
      "Bash(tree:*)",
      "Bash(./install.sh)",
      "Bash(./tests/test-installation.sh:*)",
      "WebSearch",
      "Bash(time docker exec:*)",
      "Bash(/media/bas/repo/github/ai-agents-sandbox/host/ai-sbx worktree list)",
      "Bash(/media/bas/repo/github/ai-agents-sandbox/host/ai-sbx --help)",
      "Read(//tmp/test-project/.devcontainer/**)",
      "Read(//tmp/test-dotnet/.devcontainer/**)",
      "Bash(ai-sbx docker build:*)"
    ],
    "deny": []
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); model=$(echo \"$input\" | jq -r '.model.display_name'); ccusage_info=$(ccusage statusline); printf \"\\033[96m%s\\033[0m | \\033[93m%s\\033[0m\" \"$model\" \"$ccusage_info\""
  }
}