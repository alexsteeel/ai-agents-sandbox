[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-sbx"
version = "2.1.0"
description = "AI Agents Sandbox - Secure, isolated development environments for AI-assisted coding"
readme = "README.md"
authors = [
    {name = "AI Agents Sandbox Contributors"},
]
license = {text = "MIT"}
keywords = ["devcontainer", "docker", "ai", "claude", "development", "sandbox"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Version Control :: Git",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.1.0",
    "rich>=13.0.0",
    "pyyaml>=6.0",
    "docker>=6.0.0",
    "gitpython>=3.1.0",
    "inquirer>=3.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "jinja2>=3.1.0",
    "toml>=0.10.0",
    "platformdirs>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/alexsteeel/ai-agents-sandbox"
Documentation = "https://github.com/alexsteeel/ai-agents-sandbox/blob/main/README.md"
Repository = "https://github.com/alexsteeel/ai-agents-sandbox"
Issues = "https://github.com/alexsteeel/ai-agents-sandbox/issues"

[project.scripts]
ai-sbx = "ai_sbx.cli:cli"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-docker>=2.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.0",
    "types-toml>=0.10.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/ai_sbx"]
include = [
    "src/ai_sbx/dockerfiles/**/*",
    "src/ai_sbx/docker-compose.base.yaml",
    "src/ai_sbx/resources/**/*",
]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/templates",
    "/images",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long - handled by black
    "B007",  # unused loop control variable
    "F841",  # local variable assigned but never used - sometimes needed for clarity
]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=ai_sbx --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src/ai_sbx"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]