version: '3.8'

# Shared proxy configuration
x-proxy-env: &proxy-env
  HTTP_PROXY: ${PROXY_URL:-http://tinyproxy-devcontainer:8888}
  HTTPS_PROXY: ${PROXY_URL:-http://tinyproxy-devcontainer:8888}
  NO_PROXY: ${NO_PROXY:-localhost,127.0.0.1,::1,docker,tinyproxy-devcontainer,tinyproxy-dind}
  # Lowercase versions for compatibility
  http_proxy: ${PROXY_URL:-http://tinyproxy-devcontainer:8888}
  https_proxy: ${PROXY_URL:-http://tinyproxy-devcontainer:8888}
  no_proxy: ${NO_PROXY:-localhost,127.0.0.1,::1,docker,tinyproxy-devcontainer,tinyproxy-dind}

services:
  # Docker-in-Docker service
  docker:
    image: docker:28-dind
    privileged: true  # Required for DinD
    restart: unless-stopped
    environment:
      # DinD uses its own proxy for registry access
      HTTP_PROXY: ${DIND_PROXY_URL:-http://tinyproxy-dind:8888}
      HTTPS_PROXY: ${DIND_PROXY_URL:-http://tinyproxy-dind:8888}
      NO_PROXY: ${NO_PROXY:-localhost,127.0.0.1,::1,docker,tinyproxy-devcontainer,tinyproxy-dind}
      http_proxy: ${DIND_PROXY_URL:-http://tinyproxy-dind:8888}
      https_proxy: ${DIND_PROXY_URL:-http://tinyproxy-dind:8888}
      no_proxy: ${NO_PROXY:-localhost,127.0.0.1,::1,docker,tinyproxy-devcontainer,tinyproxy-dind}
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
      - docker-data:/var/lib/docker
    tmpfs:
      - /run
      - /tmp
    networks:
      - claude-internal
    depends_on:
      - tinyproxy-dind

  # Main proxy for devcontainer - supports upstream proxy
  tinyproxy-devcontainer:
    image: tinyproxy-whitelist:latest
    restart: unless-stopped
    environment:
      # Simplified upstream proxy configuration
      UPSTREAM_PROXY: ${UPSTREAM_PROXY:-}  # Format: socks5://host:port or http://host:port
      NO_UPSTREAM: ${NO_UPSTREAM:-}         # Domains that bypass upstream
    volumes:
      - ${WHITELIST_FILE:-./whitelist.txt}:/etc/tinyproxy/user-whitelist.txt:ro
      - proxy-devcontainer-logs:/var/log/tinyproxy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - claude-internal
      - claude-external

  # Dedicated proxy for Docker-in-Docker - no upstream, direct registry access
  tinyproxy-dind:
    image: tinyproxy-dind:latest
    restart: unless-stopped
    environment:
      # No upstream proxy for dind - direct registry access only
      UPSTREAM_PROXY_TYPE: none
    volumes:
      - ${DIND_WHITELIST_FILE:-./dind-whitelist.txt}:/etc/tinyproxy/user-whitelist.txt:ro
      - proxy-dind-logs:/var/log/tinyproxy
    networks:
      - claude-internal
      - claude-external

  # Development container
  devcontainer:
    build:
      context: ${BUILD_CONTEXT:-.}
      dockerfile: ${DOCKERFILE:-Dockerfile}
      args:
        # Allow passing build args for custom images
        BASE_IMAGE: ${BASE_IMAGE:-claudecode/devcontainer:latest}
    image: ${PROJECT_NAME:-project}-devcontainer:latest
    user: claude
    environment:
      <<: *proxy-env
      # Project-specific environment
      PROJECT_NAME: ${PROJECT_NAME:-project}
      WORKSPACE: ${WORKSPACE:-/workspace}
      # Docker-in-Docker client configuration
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_VERIFY: "1"
      DOCKER_CERT_PATH: /certs/client
      # JetBrains remote development
      JETBRAINS_REMOTE_RUN: "true"
      # Claude Code configuration
      CLAUDE_CONFIG_DIR: /home/claude/.claude
      NODE_OPTIONS: --max-old-space-size=4096
    volumes:
      # Core volumes
      - ${PROJECT_DIR:-..}:/workspace
      - claude-code-config:/home/claude/.claude
      - docker-certs-client:/certs/client:ro
      
      # User configuration volumes
      - ${HOME}/.claude:/host/.claude:ro
      - ${HOME}/.p10k.zsh:/host/.p10k.zsh:ro
      - ${HOME}/.claude/projects/:/home/claude/.claude/projects
      - ${HOME}/.claude/notifications:/home/claude/.claude/notifications
      
      # Persistent state volumes
      - zsh-history:/home/claude/.zsh_history_dir
      - codex:/home/claude/.codex
      - cache:/home/claude/.cache
      
      # IDE cache for JetBrains
      - jb-cache:/.jbdevcontainer
    ports:
      # OpenAI Codex auth port
      - "${CODEX_PORT:-1455}:1455"
    working_dir: /workspace
    networks:
      - claude-internal
    depends_on:
      - docker
      - tinyproxy-devcontainer
    # Allow custom command override
    command: ${DEVCONTAINER_COMMAND:-sleep infinity}

volumes:
  docker-certs-ca:
    name: ${PROJECT_NAME:-project}-docker-certs-ca
  docker-certs-client:
    name: ${PROJECT_NAME:-project}-docker-certs-client
  docker-data:
    name: ${PROJECT_NAME:-project}-docker-data
  proxy-devcontainer-logs:
    name: ${PROJECT_NAME:-project}-proxy-devcontainer-logs
  proxy-dind-logs:
    name: ${PROJECT_NAME:-project}-proxy-dind-logs
  claude-code-config:
    name: ${PROJECT_NAME:-project}-claude-code-config
  zsh-history:
    name: ${PROJECT_NAME:-project}-zsh-history
  codex:
    name: ${PROJECT_NAME:-project}-codex
  cache:
    name: ${PROJECT_NAME:-project}-cache
  jb-cache:
    name: ${PROJECT_NAME:-project}-jb-cache

networks:
  claude-internal:
    name: ${PROJECT_NAME:-project}-claude-internal
    driver: bridge
    internal: true  # Critical: blocks direct internet access
  claude-external:
    name: ${PROJECT_NAME:-project}-claude-external
    driver: bridge