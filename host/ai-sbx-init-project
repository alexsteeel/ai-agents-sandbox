#!/bin/bash
set -euo pipefail

# AI Sandbox Project Initializer
# Sets up proper permissions and group ownership for a project directory
# This is installed system-wide and called by project-specific wrappers

PROJECT_DIR="${1:-$(pwd)}"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[INIT]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_debug() { [[ "${DEBUG:-}" == "true" ]] && echo -e "${BLUE}[DEBUG]${NC} $1" || true; }

# Check for required tools early
check_required_tools() {
    local MISSING_TOOLS=()
    
    # Check for jq (JSON processor)
    if ! command -v jq &> /dev/null; then
        MISSING_TOOLS+=("jq")
        print_debug "jq not found"
    else
        print_debug "jq found: $(command -v jq)"
    fi
    
    # Check for yq (YAML processor)
    if ! command -v yq &> /dev/null; then
        MISSING_TOOLS+=("yq")
        print_debug "yq not found"
    else
        # Check version (should be v4.x)
        YQ_VERSION=$(yq --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+' | head -1)
        if [[ "${YQ_VERSION%%.*}" -lt 4 ]]; then
            print_error "yq version 4.x or higher is required (found: $YQ_VERSION)"
            print_info "Please upgrade yq to version 4.x or higher"
            exit 1
        fi
        print_debug "yq found: $(command -v yq) (version: $YQ_VERSION)"
    fi
    
    # Exit if any required tools are missing
    if [[ ${#MISSING_TOOLS[@]} -gt 0 ]]; then
        echo ""
        print_error "Required tools are missing!"
        echo ""
        print_info "The following tools are required for this script:"
        for tool in "${MISSING_TOOLS[@]}"; do
            case $tool in
                jq)
                    echo ""
                    print_info "  ${BOLD}jq${NC} - JSON processor"
                    print_info "    Installation:"
                    print_info "      • Ubuntu/Debian: ${GREEN}sudo apt install jq${NC}"
                    print_info "      • RHEL/Fedora:   ${GREEN}sudo dnf install jq${NC}"
                    print_info "      • MacOS:         ${GREEN}brew install jq${NC}"
                    print_info "      • Manual:        https://github.com/jqlang/jq/releases"
                    ;;
                yq)
                    echo ""
                    print_info "  ${BOLD}yq${NC} - YAML processor (version 4.x)"
                    print_info "    Installation:"
                    print_info "      • Ubuntu/Debian: ${GREEN}sudo apt install yq${NC} or ${GREEN}wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && chmod +x /usr/local/bin/yq${NC}"
                    print_info "      • RHEL/Fedora:   ${GREEN}sudo dnf install yq${NC} or use wget method above"
                    print_info "      • MacOS:         ${GREEN}brew install yq${NC}"
                    print_info "      • Manual:        https://github.com/mikefarah/yq/releases"
                    ;;
            esac
        done
        echo ""
        print_info "After installing the missing tools, run this script again."
        echo ""
        exit 1
    fi
}

# Check required tools before doing anything else
check_required_tools

# Validate project directory
if [[ ! -d "$PROJECT_DIR" ]]; then
    print_error "Project directory not found: $PROJECT_DIR"
    echo "Usage: $0 [/path/to/project]"
    echo "  If no path provided, uses current directory"
    exit 1
fi

# Get absolute path
PROJECT_DIR="$(cd "$PROJECT_DIR" && pwd)"
PROJECT_NAME="$(basename "$PROJECT_DIR")"

echo ""
echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════${NC}"
echo -e "${BOLD}${BLUE}   AI Sandbox Project Initializer${NC}"
echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════${NC}"
echo -e "${BOLD}Project:${NC} $PROJECT_NAME"
echo -e "${BOLD}Path:${NC}    $PROJECT_DIR"
echo -e "${BLUE}───────────────────────────────────────────────────────────${NC}"
echo ""

# Check if dev group exists
DEV_GID=2000
if ! getent group dev >/dev/null 2>&1; then
    print_error "Group 'dev' (GID $DEV_GID) not found"
    echo ""
    echo "The AI Sandbox system is not installed. Please run:"
    echo "  sudo /path/to/ai_agents_sandbox/install.sh"
    echo ""
    exit 1
fi

# Check if current user is in dev group
if ! groups "$USER" | grep -q '\bdev\b'; then
    print_warning "User '$USER' is not in 'dev' group"
    echo ""
    echo "You need to be added to the dev group. Run:"
    echo "  sudo usermod -aG dev $USER"
    echo ""
    echo "Then log out and back in for changes to take effect."
    exit 1
fi

print_status "Initializing project for AI Sandbox..."

# Set group ownership to dev for the entire project
print_info "Setting group ownership to 'dev'..."

# Check if we own the directory
if [[ -O "$PROJECT_DIR" ]]; then
    # We own it, no sudo needed
    # Check current group ownership
    CURRENT_GROUP=$(stat -c '%G' "$PROJECT_DIR" 2>/dev/null || stat -f '%Sg' "$PROJECT_DIR" 2>/dev/null)
    
    if [[ "$CURRENT_GROUP" == "dev" ]]; then
        print_status "✓ Group ownership already set to 'dev'"
    elif chgrp -R dev "$PROJECT_DIR" 2>/dev/null; then
        print_status "✓ Group ownership changed to 'dev'"
    else
        print_warning "Could not change group ownership"
        echo "  Ensure you're in the 'dev' group: groups $USER"
        echo "  You may need to log out and back in after being added to the group"
    fi
    
    # Set group write permissions
    print_info "Setting group write permissions..."
    # Use find to handle permission errors gracefully
    find "$PROJECT_DIR" -type f -exec chmod g+rw {} \; 2>/dev/null || true
    find "$PROJECT_DIR" -type d -exec chmod g+rwx {} \; 2>/dev/null || true
    print_status "✓ Group write permissions enabled (where possible)"
    
    # Set setgid bit on directories so new files inherit group
    print_info "Enabling group inheritance on directories..."
    find "$PROJECT_DIR" -type d -exec chmod g+s {} \; 2>/dev/null || true
    print_status "✓ Group inheritance enabled (setgid)"
    
elif [[ -w "$PROJECT_DIR" ]]; then
    # We can write but don't own - might need different approach
    print_warning "You don't own $PROJECT_DIR but have write access"
    echo "  Attempting to set permissions..."
    
    if chgrp -R dev "$PROJECT_DIR" 2>/dev/null; then
        print_status "✓ Group ownership set to 'dev'"
    else
        print_warning "Cannot change group ownership without being the owner"
        echo "  Ask the owner to run: chgrp -R dev $PROJECT_DIR"
    fi
    
    # Use find to handle permission errors gracefully
    find "$PROJECT_DIR" -type f -exec chmod g+rw {} \; 2>/dev/null || true
    find "$PROJECT_DIR" -type d -exec chmod g+rwx {} \; 2>/dev/null || true
    print_status "✓ Group write permissions set where possible"
    
    find "$PROJECT_DIR" -type d -exec chmod g+s {} \; 2>/dev/null || true
    print_status "✓ Group inheritance set where possible"
else
    print_error "No write permission to $PROJECT_DIR"
    echo "Please ensure you own the directory or have write permissions"
    exit 1
fi

# Create notification directory for this user
NOTIFICATION_DIR="$HOME/.ai_agents_sandbox/notifications"
PROJECTS_DIR="$HOME/.ai_agents_sandbox/projects"

if [[ ! -d "$NOTIFICATION_DIR" ]]; then
    print_info "Creating notification directory..."
    mkdir -p "$NOTIFICATION_DIR"
    print_status "✓ Notification directory created"
else
    print_status "✓ Notification directory exists"
fi

if [[ ! -d "$PROJECTS_DIR" ]]; then
    print_info "Creating projects directory..."
    mkdir -p "$PROJECTS_DIR"
    print_status "✓ Projects directory created"
else
    print_status "✓ Projects directory exists"
fi

# Tools are already checked at the beginning, just set the flags
# Both tools are guaranteed to be available at this point
YQ_AVAILABLE=true
JQ_AVAILABLE=true

# Check for .devcontainer directory
DEVCONTAINER_DIR="$PROJECT_DIR/.devcontainer"
if [[ -d "$DEVCONTAINER_DIR" ]]; then
    print_status "✓ Found .devcontainer directory"
    
    # Create or update .env file
    ENV_FILE="$DEVCONTAINER_DIR/.env"
    
    if [[ ! -f "$ENV_FILE" ]]; then
        # Create a new .env file
        cat > "$ENV_FILE" << EOF
PROJECT_NAME=$PROJECT_NAME
PROJECT_DIR=$PROJECT_DIR
COMPOSE_PROJECT_NAME=$PROJECT_NAME
EOF
        print_status "✓ .env file created with PROJECT_NAME=$PROJECT_NAME"
    else
        # Update existing .env file
        NEEDS_UPDATE=false
        
        # Update PROJECT_NAME if it exists, otherwise add it
        if grep -q "^PROJECT_NAME=" "$ENV_FILE"; then
            CURRENT_PROJECT_NAME=$(grep "^PROJECT_NAME=" "$ENV_FILE" | cut -d'=' -f2)
            if [[ "$CURRENT_PROJECT_NAME" != "$PROJECT_NAME" ]]; then
                sed -i "s|^PROJECT_NAME=.*|PROJECT_NAME=$PROJECT_NAME|" "$ENV_FILE"
                NEEDS_UPDATE=true
            fi
        else
            echo "PROJECT_NAME=$PROJECT_NAME" >> "$ENV_FILE"
            NEEDS_UPDATE=true
        fi
        
        # Update PROJECT_DIR if it exists, otherwise add it
        if grep -q "^PROJECT_DIR=" "$ENV_FILE"; then
            CURRENT_PROJECT_DIR=$(grep "^PROJECT_DIR=" "$ENV_FILE" | cut -d'=' -f2)
            if [[ "$CURRENT_PROJECT_DIR" != "$PROJECT_DIR" ]]; then
                sed -i "s|^PROJECT_DIR=.*|PROJECT_DIR=$PROJECT_DIR|" "$ENV_FILE"
                NEEDS_UPDATE=true
            fi
        else
            echo "PROJECT_DIR=$PROJECT_DIR" >> "$ENV_FILE"
            NEEDS_UPDATE=true
        fi
        
        # Update COMPOSE_PROJECT_NAME if it exists, otherwise add it
        if grep -q "^COMPOSE_PROJECT_NAME=" "$ENV_FILE"; then
            CURRENT_COMPOSE_NAME=$(grep "^COMPOSE_PROJECT_NAME=" "$ENV_FILE" | cut -d'=' -f2)
            if [[ "$CURRENT_COMPOSE_NAME" != "$PROJECT_NAME" ]]; then
                sed -i "s|^COMPOSE_PROJECT_NAME=.*|COMPOSE_PROJECT_NAME=$PROJECT_NAME|" "$ENV_FILE"
                NEEDS_UPDATE=true
            fi
        else
            echo "COMPOSE_PROJECT_NAME=$PROJECT_NAME" >> "$ENV_FILE"
            NEEDS_UPDATE=true
        fi
        
        if [[ "$NEEDS_UPDATE" == "true" ]]; then
            print_status "✓ .env file updated with PROJECT_NAME=$PROJECT_NAME"
        else
            print_status "✓ .env file already up to date"
        fi
    fi
    
    # ============================================================================
    # DYNAMIC VOLUME MOUNTS (Git Worktree & Docker Cache)
    # ============================================================================
    
    OVERRIDE_FILE="$DEVCONTAINER_DIR/override.yaml"
    DEVCONTAINER_MOUNTS=()
    DOCKER_MOUNTS=()
    
    # ============================================================================
    # GIT WORKTREE SUPPORT
    # ============================================================================
    
    # Check if this is a git worktree
    if [[ -f "$PROJECT_DIR/.git" ]]; then
        print_info "Detected git worktree, setting up parent .git directory mount..."
        
        # Read the gitdir path from .git file
        GITDIR=$(grep "^gitdir:" "$PROJECT_DIR/.git" | cut -d' ' -f2)
        
        if [[ -n "$GITDIR" ]]; then
            # Extract the parent git directory (remove /worktrees/... part)
            PARENT_GIT_DIR=$(echo "$GITDIR" | sed 's|/\.git/worktrees/.*|/.git|')
            
            print_info "Parent .git directory: $PARENT_GIT_DIR"
            # Mount only the .git directory from parent repository to devcontainer service
            DEVCONTAINER_MOUNTS+=("$PARENT_GIT_DIR:$PARENT_GIT_DIR:ro")
        fi
    elif [[ -d "$PROJECT_DIR/.git" ]]; then
        print_info "Regular git repository detected (not a worktree)"
    fi
    
    # ============================================================================
    # DOCKER CACHE SUPPORT
    # ============================================================================
    
    print_info "Detecting Docker storage configuration..."
    
    # Get Docker root directory (data-root from daemon.json or default)
    DOCKER_DATA_ROOT=""
    
    # Check daemon.json for custom data-root using jq
    if [[ -f "/etc/docker/daemon.json" ]]; then
        DOCKER_DATA_ROOT=$(jq -r '.["data-root"] // empty' /etc/docker/daemon.json 2>/dev/null || true)
        if [[ -n "$DOCKER_DATA_ROOT" ]]; then
            print_debug "Docker data-root from daemon.json (via jq): $DOCKER_DATA_ROOT"
        fi
    fi
    
    # If not found in daemon.json, get from docker info
    if [[ -z "$DOCKER_DATA_ROOT" ]]; then
        DOCKER_DATA_ROOT=$(docker info 2>/dev/null | grep "Docker Root Dir" | awk '{print $NF}' || true)
        if [[ -n "$DOCKER_DATA_ROOT" ]]; then
            print_debug "Docker data-root from docker info: $DOCKER_DATA_ROOT"
        fi
    fi
    
    # Default to /var/lib/docker if nothing found
    if [[ -z "$DOCKER_DATA_ROOT" ]]; then
        DOCKER_DATA_ROOT="/var/lib/docker"
        print_debug "Using default Docker data-root: $DOCKER_DATA_ROOT"
    fi
    
    print_info "Docker data root: $DOCKER_DATA_ROOT"
    
    # Check if the Docker data directory exists and is accessible
    if [[ -d "$DOCKER_DATA_ROOT" ]]; then
        # BuildKit cache is always under the Docker data root
        BUILDKIT_CACHE="$DOCKER_DATA_ROOT/buildkit"
        if [[ -d "$BUILDKIT_CACHE" ]]; then
            print_info "Found BuildKit cache directory at $BUILDKIT_CACHE"
            # Mount buildkit cache for better layer caching - goes to docker service
            DOCKER_MOUNTS+=("$BUILDKIT_CACHE:/var/lib/docker/buildkit")
        fi
        
        # Mount overlay2 directory for layer reuse
        OVERLAY_DIR="$DOCKER_DATA_ROOT/overlay2"
        if [[ -d "$OVERLAY_DIR" ]]; then
            print_info "Found overlay2 storage directory"
            # Mount overlay2 as read-only for cache inspection - goes to docker service
            # The dind container will still use its own overlay2 for writes
            DOCKER_MOUNTS+=("$OVERLAY_DIR:/var/lib/docker-host/overlay2:ro")
        fi
        
        # Mount image directory for image cache reuse
        IMAGE_DIR="$DOCKER_DATA_ROOT/image"
        if [[ -d "$IMAGE_DIR" ]]; then
            print_info "Found Docker image directory"
            # Image directory mount - goes to docker service
            DOCKER_MOUNTS+=("$IMAGE_DIR:/var/lib/docker/image")
        fi
        
        print_status "✓ Docker cache directories detected and will be mounted"
    else
        print_warning "Docker data directory not accessible: $DOCKER_DATA_ROOT"
        print_info "Docker cache sharing will not be available"
    fi
    
    # ============================================================================
    # UPDATE OVERRIDE.YAML WITH ALL MOUNTS
    # ============================================================================
    
    # Check if we have any mounts to add
    TOTAL_MOUNTS=$((${#DEVCONTAINER_MOUNTS[@]} + ${#DOCKER_MOUNTS[@]}))
    
    if [[ $TOTAL_MOUNTS -gt 0 ]]; then
        print_info "Updating override.yaml with dynamic mounts..."
        
        # Use yq for YAML manipulation
        print_debug "Using yq for YAML manipulation"
        
        # Initialize override file if it doesn't exist
        if [[ ! -f "$OVERRIDE_FILE" ]]; then
            echo "# Dynamic volume mounts for devcontainer" > "$OVERRIDE_FILE"
            echo "services:" >> "$OVERRIDE_FILE"
        fi
        
        # Ensure services section exists
        if ! yq eval '.services' "$OVERRIDE_FILE" > /dev/null 2>&1; then
            yq eval '.services = {}' -i "$OVERRIDE_FILE"
        fi
        
        # Add devcontainer mounts
        if [[ ${#DEVCONTAINER_MOUNTS[@]} -gt 0 ]]; then
            for mount in "${DEVCONTAINER_MOUNTS[@]}"; do
                # Check if mount already exists
                if ! yq eval ".services.devcontainer.volumes[] | select(. == \"$mount\")" "$OVERRIDE_FILE" 2>/dev/null | grep -q "$mount"; then
                    print_debug "Adding mount to devcontainer: $mount"
                    yq eval ".services.devcontainer.volumes += [\"$mount\"]" -i "$OVERRIDE_FILE"
                else
                    print_debug "Mount already exists for devcontainer: $mount"
                fi
            done
        fi
        
        # Add docker service mounts
        if [[ ${#DOCKER_MOUNTS[@]} -gt 0 ]]; then
            print_info "Adding Docker cache mounts to docker service..."
            
            for mount in "${DOCKER_MOUNTS[@]}"; do
                # Check if mount already exists
                if ! yq eval ".services.docker.volumes[] | select(. == \"$mount\")" "$OVERRIDE_FILE" 2>/dev/null | grep -q "$mount"; then
                    print_debug "Adding Docker cache mount: $mount"
                    yq eval ".services.docker.volumes += [\"$mount\"]" -i "$OVERRIDE_FILE"
                else
                    print_debug "Docker cache mount already exists: $mount"
                fi
            done
            
            # Add environment variable to docker service to use cache
            yq eval '.services.docker.environment.DOCKER_BUILDKIT_CACHE_MOUNT_NS = "host"' -i "$OVERRIDE_FILE"
        fi
        
        print_status "✓ Dynamic mounts configured in override.yaml"
    else
        print_info "No dynamic mounts needed"
    fi
else
    print_info "No .devcontainer directory found (optional)"
fi

# Summary
echo ""
echo -e "${GREEN}═══════════════════════════════════════════════════════════${NC}"
echo -e "${BOLD}${GREEN}✓ Project initialization complete!${NC}"
echo -e "${GREEN}───────────────────────────────────────────────────────────${NC}"
echo ""
echo "Project '$PROJECT_NAME' is now configured for AI Sandbox."
echo ""
echo -e "${BOLD}What was done:${NC}"
echo "  • Group ownership set to 'dev'"
echo "  • Group write permissions enabled"
echo "  • Directory inheritance configured"
echo "  • User directories created"
if [[ -f "$ENV_FILE" ]]; then
    echo "  • .env file configured"
fi
echo ""
echo -e "${BOLD}Next steps:${NC}"
if [[ -d "$DEVCONTAINER_DIR" ]]; then
    echo "  1. Review .devcontainer/.env if needed"
    echo "  2. Start containers:"
    echo "     cd $DEVCONTAINER_DIR"
    echo "     docker compose up -d"
    echo "  3. Or open project in VS Code/PyCharm"
else
    echo "  1. Copy .devcontainer.example to your project:"
    echo "     cp -r /usr/local/share/ai-sandbox/.devcontainer.example $DEVCONTAINER_DIR"
    echo "  2. Run initialization again to configure .env"
fi
echo ""
echo "For desktop notifications (optional):"
echo "  ai-sbx-notify-watch"
echo ""

exit 0
