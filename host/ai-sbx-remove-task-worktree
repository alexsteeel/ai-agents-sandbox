#!/bin/bash
set -euo pipefail

# Remove a git worktree for a task
# Usage: ai-sbx-remove-task-worktree [worktree-path-or-branch]

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

print_status() { printf "${GREEN}➜${NC} %s\n" "$1"; }
print_error() { printf "${RED}✗${NC} %s\n" "$1" >&2; }
print_warning() { printf "${YELLOW}⚠${NC} %s\n" "$1"; }
print_info() { printf "${BLUE}ℹ${NC} %s\n" "$1"; }

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get list of worktrees
worktrees=$(git worktree list --porcelain | grep "^worktree " | cut -d' ' -f2-)

if [[ -z "$worktrees" ]]; then
    print_error "No worktrees found"
    exit 1
fi

# Function to remove worktree
remove_worktree() {
    local worktree_path="$1"
    
    # Get branch name for this worktree
    local branch=$(git worktree list --porcelain | grep -A2 "^worktree $worktree_path" | grep "^branch " | cut -d' ' -f2- | sed 's|refs/heads/||')
    
    print_warning "About to remove worktree: $worktree_path"
    if [[ -n "$branch" ]]; then
        print_info "Associated branch: $branch"
    fi
    echo ""
    read -p "Are you sure? This will delete all uncommitted changes! [y/N]: " confirm
    
    if [[ "${confirm,,}" == "y" ]]; then
        print_status "Removing worktree..."
        if git worktree remove "$worktree_path" --force; then
            print_status "Worktree removed successfully"
            
            # Check if directory still exists (shouldn't happen, but just in case)
            if [[ -d "$worktree_path" ]]; then
                print_warning "Directory still exists, removing it..."
                rm -rf "$worktree_path"
            fi
            
            # Ask about branch deletion
            if [[ -n "$branch" ]]; then
                echo ""
                read -p "Also delete the branch '$branch'? [y/N]: " delete_branch
                if [[ "${delete_branch,,}" == "y" ]]; then
                    print_status "Deleting branch: $branch"
                    if git branch -D "$branch" 2>/dev/null; then
                        print_status "Branch deleted successfully"
                    else
                        print_warning "Could not delete branch (might be checked out elsewhere or protected)"
                    fi
                else
                    print_info "Branch kept: $branch"
                    print_info "To delete it later: git branch -D $branch"
                fi
            fi
            
            return 0
        else
            print_error "Failed to remove worktree"
            return 1
        fi
    else
        print_info "Removal cancelled"
        return 1
    fi
}

# If argument provided, try to use it
if [[ $# -gt 0 ]]; then
    target="$1"
    
    # Check if it's a direct path
    if [[ -d "$target" ]]; then
        target_abs=$(realpath "$target")
        if git worktree list | grep -q "$target_abs"; then
            remove_worktree "$target_abs"
            exit $?
        else
            print_error "Directory exists but is not a worktree: $target"
            exit 1
        fi
    fi
    
    # Check if it's a branch name
    branch_worktree=$(git worktree list --porcelain | grep -B1 "branch refs/heads/$target" | grep "^worktree " | cut -d' ' -f2-)
    if [[ -n "$branch_worktree" ]]; then
        remove_worktree "$branch_worktree"
        exit $?
    fi
    
    # Try as partial match
    matches=()
    while IFS= read -r worktree; do
        if [[ "$worktree" == *"$target"* ]]; then
            matches+=("$worktree")
        fi
    done <<< "$worktrees"
    
    if [[ ${#matches[@]} -eq 1 ]]; then
        remove_worktree "${matches[0]}"
        exit $?
    elif [[ ${#matches[@]} -gt 1 ]]; then
        print_error "Multiple worktrees match '$target':"
        for match in "${matches[@]}"; do
            echo "  - $match"
        done
        print_info "Please be more specific"
        exit 1
    else
        print_error "No worktree found matching: $target"
        exit 1
    fi
fi

# No argument provided, show menu
echo ""
print_status "Available worktrees:"
echo ""

# Build array of worktrees
declare -A worktree_map
i=1
while IFS= read -r worktree; do
    # Skip the main worktree
    if ! git worktree list | grep -q "$worktree (bare)"; then
        # Get branch name for this worktree
        branch=$(git worktree list --porcelain | grep -A2 "^worktree $worktree" | grep "^branch " | cut -d' ' -f2- | sed 's|refs/heads/||')
        if [[ -n "$branch" ]]; then
            echo "  ${i}. $worktree (branch: $branch)"
        else
            echo "  ${i}. $worktree"
        fi
        worktree_map[$i]="$worktree"
        ((i++))
    fi
done <<< "$worktrees"

if [[ ${#worktree_map[@]} -eq 0 ]]; then
    print_error "No removable worktrees found (only main worktree exists)"
    exit 1
fi

echo "  0. Cancel"
echo ""

read -p "Enter your choice [0-$((i-1))]: " choice

if [[ "$choice" == "0" ]]; then
    print_info "Removal cancelled"
    exit 0
elif [[ -n "${worktree_map[$choice]}" ]]; then
    remove_worktree "${worktree_map[$choice]}"
else
    print_error "Invalid choice"
    exit 1
fi