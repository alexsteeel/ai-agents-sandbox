#compdef ai-sbx
# Zsh completion for ai-sbx command
# 
# Installation:
#   1. Add to your ~/.zshrc:
#      fpath=(~/.zsh/completions $fpath)
#      autoload -U compinit && compinit
#   
#   2. Copy this file to ~/.zsh/completions/_ai-sbx
#      mkdir -p ~/.zsh/completions
#      cp _ai-sbx ~/.zsh/completions/
#   
#   3. Reload your shell or run:
#      compinit

_ai-sbx() {
    local line state

    # Define main commands
    local -a main_commands
    main_commands=(
        'worktree:Manage git worktrees for isolated tasks'
        'init:Initialize project with proper permissions'
        'notify:Start notification watcher for container alerts'
        'help:Show help information'
        'version:Show version information'
    )

    # Define worktree subcommands
    local -a worktree_commands
    worktree_commands=(
        'create:Create new git worktree for isolated task'
        'connect:Connect to existing worktree interactively'
        'remove:Remove worktree and optionally its branch'
        'list:List all worktrees with status'
        'help:Show worktree help'
    )

    # Main completion logic
    _arguments -C \
        '1: :->command' \
        '2: :->subcommand' \
        '*::arg:->args'

    case $state in
        command)
            # Complete main commands
            _describe 'command' main_commands
            _arguments \
                '(-h --help)'{-h,--help}'[Show help message]' \
                '(-v --version)'{-v,--version}'[Show version information]'
            ;;
        
        subcommand)
            case $line[1] in
                worktree|wt)
                    _describe 'worktree subcommand' worktree_commands
                    ;;
                init|initialize)
                    _path_files -/ -W / -P '/' # Complete directory paths
                    ;;
                notify|notifications|watch)
                    # No subcommands for notify
                    ;;
            esac
            ;;
        
        args)
            case $line[1] in
                worktree|wt)
                    case $line[2] in
                        create)
                            # Suggest common task prefixes
                            local -a task_prefixes
                            task_prefixes=(
                                'feature:New feature implementation'
                                'bugfix:Bug fix'
                                'hotfix:Urgent production fix'
                                'refactor:Code refactoring'
                                'test:Test implementation'
                                'docs:Documentation update'
                                'chore:Maintenance task'
                                'experiment:Experimental changes'
                            )
                            _describe 'task type' task_prefixes
                            ;;
                        
                        remove|rm|delete)
                            # Complete with existing worktree names
                            _ai-sbx_worktrees
                            ;;
                        
                        connect)
                            # No arguments needed (interactive)
                            ;;
                        
                        list|ls)
                            # No arguments needed
                            ;;
                    esac
                    ;;
                
                init|initialize)
                    # Complete with directory paths
                    _path_files -/ -W / -P '/'
                    ;;
            esac
            ;;
    esac
}

# Helper function to list git worktrees
_ai-sbx_worktrees() {
    local -a worktrees
    if command -v git >/dev/null 2>&1; then
        # Get worktree names from git
        worktrees=(${(f)"$(git worktree list --porcelain 2>/dev/null | awk '/^branch/ {gsub(/.*\//, "", $2); print $2}')"})
        if [[ ${#worktrees} -gt 0 ]]; then
            _describe 'worktree' worktrees
        fi
    fi
}

# Helper function for common options
_ai-sbx_common_options() {
    _arguments \
        '(-h --help)'{-h,--help}'[Show help message]' \
        '(-v --version)'{-v,--version}'[Show version information]'
}

# Register the completion function
_ai-sbx "$@"