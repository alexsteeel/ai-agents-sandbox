#!/bin/bash
# Create a git worktree for a new task with proper structure
# Usage: ai-sbx-create-task-worktree "task description"
# Example: ai-sbx-create-task-worktree "bugfix 5678 fix memory leak"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

print_status() { printf "${GREEN}➜${NC} %s\n" "$1"; }
print_error() { printf "${RED}✗${NC} %s\n" "$1" >&2; }
print_warning() { printf "${YELLOW}⚠${NC} %s\n" "$1"; }
print_info() { printf "${BLUE}ℹ${NC} %s\n" "$1"; }

# Function to detect available IDEs
detect_ides() {
    local ides=()
    
    # Check for VS Code
    if command -v code >/dev/null 2>&1; then
        ides+=("vscode:VS_Code:code")
    fi
    
    # Check for devcontainer CLI (VS Code devcontainer)
    if command -v devcontainer >/dev/null 2>&1; then
        ides+=("devcontainer:VS_Code_DevContainer:devcontainer")
    fi
    
    # Check for PyCharm
    if command -v pycharm >/dev/null 2>&1; then
        ides+=("pycharm:PyCharm:pycharm")
    elif command -v pycharm.sh >/dev/null 2>&1; then
        ides+=("pycharm:PyCharm:pycharm.sh")
    fi
    
    # Check for Rider
    if command -v rider >/dev/null 2>&1; then
        ides+=("rider:Rider:rider")
    elif command -v rider.sh >/dev/null 2>&1; then
        ides+=("rider:Rider:rider.sh")
    fi
    
    # Check for GoLand
    if command -v goland >/dev/null 2>&1; then
        ides+=("goland:GoLand:goland")
    elif command -v goland.sh >/dev/null 2>&1; then
        ides+=("goland:GoLand:goland.sh")
    fi
    
    printf '%s\n' "${ides[@]}"
}

# Function to open IDE
open_ide() {
    local ide_command="$1"
    local ide_name="$2"
    local project_path="$3"
    
    # Always run ai-sbx-init-project to ensure proper setup (including git worktree mounts)
    if command -v ai-sbx-init-project >/dev/null 2>&1; then
        print_info "Initializing project for AI Sandbox..."
        ai-sbx-init-project "${project_path}"
    else
        print_warning "ai-sbx-init-project not found, skipping initialization"
    fi
    
    # Special handling for devcontainer CLI
    if [[ "${ide_command}" == "devcontainer" ]]; then
        print_status "Preparing DevContainer environment..."
        
        cd "${project_path}"
        
        # Start the devcontainer
        if devcontainer up --workspace-folder .; then
            print_status "DevContainer started successfully"
            
            # Open interactive shell in the devcontainer
            print_status "Opening shell in DevContainer..."
            devcontainer exec --workspace-folder . /bin/zsh
            
            print_status "DevContainer session ended"
        else
            print_error "Failed to start DevContainer"
            return 1
        fi
    else
        print_status "Opening ${ide_name}..."
        "${ide_command}" "${project_path}" &
        print_status "${ide_name} opened in background"
    fi
}

# Function to read preferred IDE from .env
get_preferred_ide() {
    local repo_root="$(git rev-parse --show-toplevel)"
    local env_file="${repo_root}/.devcontainer/.env"
    
    # Read from .env
    if [[ -f "${env_file}" ]]; then
        grep '^PREFERRED_IDE=' "${env_file}" 2>/dev/null | cut -d'=' -f2 | tr -d '"' | tr -d "'"
    fi
}

# Function to save preferred IDE to .env
save_preferred_ide() {
    local ide_id="$1"
    local repo_root="$(git rev-parse --show-toplevel)"
    local env_file="${repo_root}/.devcontainer/.env"
    
    # Ensure .env exists
    if [[ ! -f "${env_file}" ]]; then
        mkdir -p "${repo_root}/.devcontainer" 2>/dev/null || true
        touch "${env_file}"
    fi
    
    # Remove existing PREFERRED_IDE if present
    if grep -q '^PREFERRED_IDE=' "${env_file}" 2>/dev/null; then
        grep -v '^PREFERRED_IDE=' "${env_file}" > "${env_file}.tmp" 2>/dev/null || true
        mv "${env_file}.tmp" "${env_file}"
    fi
    
    # Add new PREFERRED_IDE
    echo "PREFERRED_IDE=${ide_id}" >> "${env_file}"
    print_info "Saved IDE preference to .env: ${ide_id}"
}

# Check arguments
if [[ $# -eq 0 ]]; then
    print_error "Task description required"
    echo ""
    echo "Usage: $0 \"task description\""
    echo ""
    echo "Examples:"
    echo "  $0 \"feature 1234 implement user authentication\""
    echo "  $0 \"bugfix 5678 fix memory leak\""
    echo ""
    exit 1
fi

TASK_DESCRIPTION="$1"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get the current repository name
REPO_NAME=$(basename "$(git rev-parse --show-toplevel)")

# Convert task description to branch name format
# "bugfix 5678 fix memory leak" -> "bugfix-5678-fix-memory-leak"
BRANCH_NAME=$(echo "$TASK_DESCRIPTION" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-\|-$//g')

# Create worktree directory name with repo prefix
WORKTREE_DIR="../${REPO_NAME}-${BRANCH_NAME}"

# Check if worktree already exists
if git worktree list | grep -q "$WORKTREE_DIR"; then
    print_error "Worktree already exists: $WORKTREE_DIR"
    print_info "To remove it: ai-sbx-remove-task-worktree"
    exit 1
fi

# Check if directory already exists
if [[ -d "$WORKTREE_DIR" ]]; then
    print_error "Directory already exists: $WORKTREE_DIR"
    exit 1
fi

# Create the worktree
print_status "Creating worktree: $WORKTREE_DIR"
print_status "Branch name: $BRANCH_NAME"
echo ""

if git worktree add -b "$BRANCH_NAME" "$WORKTREE_DIR"; then
    print_status "Worktree created successfully"
else
    print_error "Failed to create worktree"
    exit 1
fi

# Get absolute path to worktree
WORKTREE_ABS_PATH=$(realpath "$WORKTREE_DIR")
print_status "Worktree created at: $WORKTREE_ABS_PATH"

# Check for and copy secure.init.sh if it exists (contains credentials, not in git)
REPO_ROOT=$(git rev-parse --show-toplevel)
SECURE_INIT_SRC="${REPO_ROOT}/.devcontainer/secure.init.sh"
SECURE_INIT_DEST="${WORKTREE_ABS_PATH}/.devcontainer/secure.init.sh"

if [[ -f "${SECURE_INIT_SRC}" ]]; then
    print_status "Found secure.init.sh, copying to worktree..."
    
    # Ensure .devcontainer directory exists in worktree
    mkdir -p "${WORKTREE_ABS_PATH}/.devcontainer"
    
    # Copy secure.init.sh to worktree
    cp "${SECURE_INIT_SRC}" "${SECURE_INIT_DEST}"
    
    # Preserve executable permissions if they exist
    if [[ -x "${SECURE_INIT_SRC}" ]]; then
        chmod +x "${SECURE_INIT_DEST}"
    fi
    
    print_status "Copied secure.init.sh to worktree (contains credentials)"
else
    print_info "No secure.init.sh found (create one for credentials that shouldn't be in git)"
fi

# Create task folder structure
TASK_DIR="$WORKTREE_ABS_PATH/tasks/${BRANCH_NAME}"
print_status "Creating task folder: $TASK_DIR"
mkdir -p "$TASK_DIR"

# Create initial requirements file
REQUIREMENTS_FILE="$TASK_DIR/initial_requirements.md"
print_status "Creating initial requirements file: $REQUIREMENTS_FILE"

cat > "$REQUIREMENTS_FILE" << EOF
# Task: $TASK_DESCRIPTION

## Task ID: $BRANCH_NAME

## Created: $(date +"%Y-%m-%d %H:%M:%S")

## Initial Requirements

[Describe the task requirements here]

## Acceptance Criteria

- [ ] Criteria 1
- [ ] Criteria 2
- [ ] Criteria 3

## Technical Approach

[Describe the technical approach]

## Notes

[Additional notes]
EOF

print_status "Initial requirements file created"

# Detect and open IDE
mapfile -t available_ides < <(detect_ides)

# Check for preferred IDE
PREFERRED_IDE=$(get_preferred_ide)

if [[ ${#available_ides[@]} -eq 0 ]]; then
    print_warning "No supported IDEs found in PATH"
    print_info "You can open the project manually from: $WORKTREE_ABS_PATH"
elif [[ ${#available_ides[@]} -eq 1 ]]; then
    # Only one IDE available, open it directly
    IFS=':' read -r ide_id ide_name ide_command <<< "${available_ides[0]}"
    open_ide "${ide_command}" "${ide_name}" "$WORKTREE_ABS_PATH"
    save_preferred_ide "${ide_id}"
    
    # Skip directory change prompt for devcontainer (it runs interactively)
    if [[ "${ide_command}" == "devcontainer" ]]; then
        exit 0
    fi
else
    # Multiple IDEs available
    
    # Check if preferred IDE is available
    preferred_found=false
    preferred_command=""
    preferred_name=""
    
    if [[ -n "${PREFERRED_IDE}" ]]; then
        for ide_entry in "${available_ides[@]}"; do
            IFS=':' read -r ide_id ide_name ide_command <<< "${ide_entry}"
            if [[ "${ide_id}" == "${PREFERRED_IDE}" ]]; then
                preferred_found=true
                preferred_command="${ide_command}"
                preferred_name="${ide_name}"
                break
            fi
        done
    fi
    
    # Function to show IDE selection menu
    show_ide_menu() {
        echo ""
        print_status "Multiple IDEs detected. Please select one:"
        echo ""
        
        declare -A ide_map
        declare -A ide_id_map
        i=1
        for ide_entry in "${available_ides[@]}"; do
            IFS=':' read -r ide_id ide_name ide_command <<< "${ide_entry}"
            ide_name="${ide_name//_/ }"
            echo "  ${i}. ${ide_name}"
            ide_map[${i}]="${ide_command}:${ide_name}"
            ide_id_map[${i}]="${ide_id}"
            ((i++))
        done
        echo "  0. Skip (open manually later)"
        echo ""
        
        read -p "Enter your choice [0-$((i-1))]: " choice
        
        if [[ "${choice}" == "0" ]]; then
            print_info "Skipping IDE launch. You can open the project manually from: $WORKTREE_ABS_PATH"
        elif [[ -n "${ide_map[${choice}]:-}" ]]; then
            IFS=':' read -r ide_command ide_name <<< "${ide_map[${choice}]}"
            open_ide "${ide_command}" "${ide_name}" "$WORKTREE_ABS_PATH"
            
            # Ask if user wants to save this as preference (unless it's devcontainer)
            if [[ "${ide_command}" != "devcontainer" ]]; then
                echo ""
                read -p "Save ${ide_name} as preferred IDE for this project? [y/N]: " save_pref
                if [[ "${save_pref}" =~ ^[Yy]$ ]]; then
                    save_preferred_ide "${ide_id_map[${choice}]}"
                fi
            else
                # For devcontainer, save preference and exit (it runs interactively)
                save_preferred_ide "${ide_id_map[${choice}]}"
                exit 0
            fi
        else
            print_warning "Invalid choice. You can open the project manually from: $WORKTREE_ABS_PATH"
        fi
    }
    
    # Check if preferred IDE is set and available
    if [[ -n "${PREFERRED_IDE}" && "${preferred_found}" == "true" ]]; then
        # Ask if user wants to use preferred IDE
        echo ""
        read -p "Open in ${preferred_name//_/ }? [Y/n]: " use_preferred
        
        if [[ ! "${use_preferred}" =~ ^[Nn]$ ]]; then
            print_status "Opening ${preferred_name//_/ }..."
            open_ide "${preferred_command}" "${preferred_name}" "$WORKTREE_ABS_PATH"
            
            # Exit if devcontainer (it runs interactively)
            if [[ "${preferred_command}" == "devcontainer" ]]; then
                exit 0
            fi
        else
            # User declined preferred IDE, show full menu
            show_ide_menu
        fi
    else
        # No preferred IDE or preferred IDE not available, show menu
        show_ide_menu
    fi
fi

# Ask if user wants to change directory to the worktree
echo ""
read -p "Change directory to the new worktree? [Y/n]: " change_dir

if [[ ! "${change_dir}" =~ ^[Nn]$ ]]; then
    cd "$WORKTREE_ABS_PATH"
    print_status "Changed directory to: $WORKTREE_ABS_PATH"
    
    # Update shell prompt to show new location
    echo ""
    print_info "You are now in the worktree directory:"
    print_info "$(pwd)"
else
    print_info "Staying in current directory. You can change to worktree with:"
    print_info "cd $WORKTREE_ABS_PATH"
fi

# Summary
echo ""
echo "================================================================"
echo -e "${BOLD}${GREEN}Task worktree created successfully!${NC}"
echo ""
echo -e "${BOLD}Worktree:${NC} $WORKTREE_ABS_PATH"
echo -e "${BOLD}Branch:${NC} $BRANCH_NAME"
echo -e "${BOLD}Task folder:${NC} $TASK_DIR"
echo -e "${BOLD}Requirements:${NC} $REQUIREMENTS_FILE"
echo ""
echo "Next steps:"
echo "1. Edit the initial requirements in: $REQUIREMENTS_FILE"
echo "2. Start the devcontainer if needed"
echo "3. Begin development"
echo ""
echo "To remove this worktree later:"
echo "  git worktree remove $WORKTREE_DIR"
echo "================================================================"