#!/bin/bash
set -euo pipefail

# AI Agents Sandbox - Unified CLI Interface
# Main entry point for all ai-sbx commands

SCRIPT_NAME="$(basename "$0")"
VERSION="1.0.0"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

# Print colored output
print_error() { printf "${RED}Error:${NC} %s\n" "$1" >&2; }
print_warning() { printf "${YELLOW}Warning:${NC} %s\n" "$1"; }
print_success() { printf "${GREEN}✓${NC} %s\n" "$1"; }
print_info() { printf "${BLUE}Info:${NC} %s\n" "$1"; }
print_header() { printf "${BOLD}%s${NC}\n" "$1"; }

# Show version
show_version() {
    echo "AI Agents Sandbox CLI v${VERSION}"
}

# Show main help
show_help() {
    printf "${BOLD}AI Agents Sandbox CLI${NC}\n\n"
    
    printf "${BOLD}Usage:${NC}\n"
    printf "  %s <command> [arguments]\n" "$SCRIPT_NAME"
    printf "  %s [options]\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}Commands:${NC}\n"
    printf "  ${GREEN}worktree${NC}     Manage git worktrees for isolated tasks\n"
    printf "  ${GREEN}init${NC}         Initialize project with proper permissions\n"
    printf "  ${GREEN}notify${NC}       Start notification watcher for container alerts\n\n"
    
    printf "${BOLD}Options:${NC}\n"
    printf "  -h, --help     Show this help message\n"
    printf "  -v, --version  Show version information\n\n"
    
    printf "${BOLD}Worktree Commands:${NC}\n"
    printf "  %s worktree create <description>  Create new task worktree\n" "$SCRIPT_NAME"
    printf "  %s worktree connect               Connect to existing worktree\n" "$SCRIPT_NAME"
    printf "  %s worktree remove [name]         Remove worktree and optionally branch\n" "$SCRIPT_NAME"
    printf "  %s worktree list                  List all worktrees\n" "$SCRIPT_NAME"
    printf "  %s worktree help                  Show worktree help\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}Examples:${NC}\n"
    printf "  # Create new task worktree\n"
    printf "  %s worktree create \"feature 123 implement user auth\"\n\n" "$SCRIPT_NAME"
    
    printf "  # Connect to existing worktree\n"
    printf "  %s worktree connect\n\n" "$SCRIPT_NAME"
    
    printf "  # Remove worktree\n"
    printf "  %s worktree remove fix-123\n\n" "$SCRIPT_NAME"
    
    printf "  # Initialize project\n"
    printf "  %s init /path/to/project\n\n" "$SCRIPT_NAME"
    
    printf "  # Start notification watcher\n"
    printf "  %s notify\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}For more help on a specific command:${NC}\n"
    printf "  %s <command> --help\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}Documentation:${NC}\n"
    printf "  https://github.com/alexsteeel/ai-agents-sandbox\n\n"
}

# Show worktree help
show_worktree_help() {
    printf "${BOLD}AI Agents Sandbox - Worktree Management${NC}\n\n"
    
    printf "${BOLD}Usage:${NC}\n"
    printf "  %s worktree <subcommand> [arguments]\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}Subcommands:${NC}\n"
    printf "  ${GREEN}create${NC} <description>   Create new git worktree for isolated task\n"
    printf "  ${GREEN}connect${NC}                Connect to existing worktree (interactive)\n"
    printf "  ${GREEN}remove${NC} [name]          Remove worktree and optionally its branch\n"
    printf "  ${GREEN}list${NC}                   List all worktrees with status\n"
    printf "  ${GREEN}help${NC}                   Show this help message\n\n"
    
    printf "${BOLD}Create Command:${NC}\n"
    printf "  %s worktree create <description>\n\n" "$SCRIPT_NAME"
    printf "  Creates a new git worktree with:\n"
    printf "  - Repository-prefixed name (e.g., ai-agents-sandbox-fix-123)\n"
    printf "  - New branch from current HEAD\n"
    printf "  - Task folder structure with requirements template\n"
    printf "  - Automatic IDE detection and launch\n\n"
    
    printf "  ${BOLD}Examples:${NC}\n"
    printf "    %s worktree create \"feature 123 implement user auth\"\n" "$SCRIPT_NAME"
    printf "    %s worktree create \"bugfix 5678 fix memory leak\"\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}Connect Command:${NC}\n"
    printf "  %s worktree connect\n\n" "$SCRIPT_NAME"
    printf "  Interactive menu to:\n"
    printf "  - List all available worktrees\n"
    printf "  - Show task descriptions and status\n"
    printf "  - Connect to DevContainer if running\n"
    printf "  - Change to worktree directory\n\n"
    
    printf "  ${BOLD}Example:${NC}\n"
    printf "    %s worktree connect\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}Remove Command:${NC}\n"
    printf "  %s worktree remove [name]\n\n" "$SCRIPT_NAME"
    printf "  Remove worktree with options to:\n"
    printf "  - Interactive selection if no name provided\n"
    printf "  - Multiple selection support (space-separated numbers)\n"
    printf "  - Optional branch deletion\n"
    printf "  - Partial name matching\n\n"
    
    printf "  ${BOLD}Examples:${NC}\n"
    printf "    %s worktree remove                  # Interactive\n" "$SCRIPT_NAME"
    printf "    %s worktree remove fix-123           # By name\n" "$SCRIPT_NAME"
    printf "    %s worktree remove fix              # Partial match\n\n" "$SCRIPT_NAME"
    
    printf "${BOLD}List Command:${NC}\n"
    printf "  %s worktree list\n\n" "$SCRIPT_NAME"
    printf "  Shows all worktrees with:\n"
    printf "  - Worktree path and branch\n"
    printf "  - Current HEAD commit\n"
    printf "  - Task description (if available)\n"
    printf "  - Last modified date\n\n"
    
    printf "${BOLD}Environment Variables:${NC}\n"
    printf "  PREFERRED_IDE    Set preferred IDE (vscode, pycharm, rider, goland)\n"
    printf "  PROJECT_NAME     Override project name detection\n\n"
    
    printf "${BOLD}Notes:${NC}\n"
    printf "  • Worktrees are created in parent directory of current repo\n"
    printf "  • Each worktree gets its own DevContainer environment\n"
    printf "  • IDE preference is saved in .devcontainer/.env\n"
    printf "  • Use 'git worktree list' for raw git output\n\n"
}

# Worktree subcommand handler
handle_worktree() {
    local subcommand="${1:-}"
    shift || true
    
    case "$subcommand" in
        create)
            if [[ $# -eq 0 ]]; then
                print_error "Missing task description"
                echo "Usage: ${SCRIPT_NAME} worktree create <description>"
                exit 1
            fi
            exec ai-sbx-create-task-worktree "$@"
            ;;
        connect)
            exec ai-sbx-connect-task-worktree "$@"
            ;;
        remove|rm|delete)
            exec ai-sbx-remove-task-worktree "$@"
            ;;
        list|ls)
            # Direct git worktree list with formatting
            if command -v git >/dev/null 2>&1; then
                print_header "Git Worktrees:"
                git worktree list --porcelain | awk '
                    /^worktree/ {
                        path = $2
                        getline
                        if ($1 == "HEAD") commit = substr($2, 1, 7)
                        getline
                        if ($1 == "branch") branch = $2
                        printf "  %-50s %s [%s]\n", path, branch, commit
                    }
                '
            else
                print_error "Git is not installed"
                exit 1
            fi
            ;;
        help|--help|-h)
            show_worktree_help
            ;;
        "")
            print_error "No subcommand specified"
            echo "Usage: ${SCRIPT_NAME} worktree <subcommand> [arguments]"
            echo "Try '${SCRIPT_NAME} worktree help' for more information"
            exit 1
            ;;
        *)
            print_error "Unknown worktree subcommand: $subcommand"
            echo "Valid subcommands: create, connect, remove, list, help"
            exit 1
            ;;
    esac
}

# Init command handler
handle_init() {
    exec ai-sbx-init-project "$@"
}

# Notify command handler
handle_notify() {
    exec ai-sbx-notify-watch "$@"
}

# Main command router
main() {
    # Handle no arguments
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    # Parse main command
    local command="$1"
    shift
    
    case "$command" in
        # Main commands
        worktree|wt)
            handle_worktree "$@"
            ;;
        init|initialize)
            handle_init "$@"
            ;;
        notify|notifications|watch)
            handle_notify "$@"
            ;;
            
        # Help and version
        -h|--help|help)
            show_help
            ;;
        -v|--version|version)
            show_version
            ;;
            
        # Unknown command
        *)
            print_error "Unknown command: $command"
            echo ""
            echo "Valid commands: worktree, init, notify"
            echo "Try '${SCRIPT_NAME} --help' for more information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"