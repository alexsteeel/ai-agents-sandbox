#!/bin/bash
set -euo pipefail

# claude-devcontainer - Main management script for Claude DevContainer
# Provides simple commands to manage devcontainer environments

SCRIPT_NAME="$(basename "$0")"
VERSION="1.0.0"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[$SCRIPT_NAME]${NC} $1"; }
print_error() { echo -e "${RED}[$SCRIPT_NAME]${NC} $1" >&2; }
print_warning() { echo -e "${YELLOW}[$SCRIPT_NAME]${NC} $1"; }
print_info() { echo -e "${BLUE}[$SCRIPT_NAME]${NC} $1"; }

# Show usage
show_usage() {
    cat <<EOF
Claude DevContainer Manager v${VERSION}

Usage: $SCRIPT_NAME <command> [options]

Commands:
  init <dir>        Initialize a new devcontainer in directory
  start [dir]       Start devcontainer services
  stop [dir]        Stop devcontainer services
  restart [dir]     Restart devcontainer services
  status [dir]      Show status of services
  logs [dir]        Show service logs
  shell [dir]       Open shell in devcontainer
  validate [dir]    Validate devcontainer configuration
  clean [dir]       Clean up volumes and containers
  version           Show version information
  help              Show this help message

Options:
  -h, --help        Show help for specific command
  -v, --verbose     Verbose output
  -f, --force       Force operation

Examples:
  $SCRIPT_NAME init /path/to/project
  $SCRIPT_NAME start
  $SCRIPT_NAME shell
  $SCRIPT_NAME logs -f devcontainer

For more information, see: https://github.com/your-repo/claude-devcontainer
EOF
}

# Get project directory
get_project_dir() {
    local dir="${1:-$(pwd)}"
    if [[ ! -d "$dir/.devcontainer" ]]; then
        print_error "No .devcontainer directory found in $dir"
        print_error "Run 'claude-devcontainer init $dir' first"
        exit 1
    fi
    echo "$(realpath "$dir")"
}

# Get project name from directory
get_project_name() {
    local dir="$1"
    if [[ -f "$dir/.devcontainer/.env.project" ]]; then
        grep "^COMPOSE_PROJECT_NAME=" "$dir/.devcontainer/.env.project" | cut -d= -f2
    else
        basename "$dir" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g'
    fi
}

# Initialize command
cmd_init() {
    local target_dir="${1:-$(pwd)}"
    
    print_status "Initializing devcontainer in: $target_dir"
    
    # Call the workspace init script
    if command -v claude-workspace-init >/dev/null 2>&1; then
        claude-workspace-init "$target_dir"
    else
        print_error "claude-workspace-init not found. Please run the installer first."
        exit 1
    fi
}

# Start command
cmd_start() {
    local project_dir=$(get_project_dir "${1:-}")
    local project_name=$(get_project_name "$project_dir")
    
    print_status "Starting services for project: $project_name"
    
    cd "$project_dir/.devcontainer"
    
    # Check if docker-compose.yaml exists
    if [[ ! -f "docker-compose.yaml" ]]; then
        print_error "docker-compose.yaml not found"
        exit 1
    fi
    
    # Start services
    docker compose -p "$project_name" up -d
    
    # Wait for services to be healthy
    print_status "Waiting for services to be ready..."
    sleep 3
    
    # Copy Docker certificates
    print_status "Setting up Docker certificates..."
    local docker_container="${project_name}-docker-1"
    local cert_dir="$HOME/.claude-docker-certs-${project_name}"
    
    mkdir -p "$cert_dir"
    
    if docker ps --format '{{.Names}}' | grep -q "^${docker_container}$"; then
        docker cp "${docker_container}:/certs/client/." "$cert_dir" 2>/dev/null || true
        print_status "Docker certificates copied to $cert_dir"
    fi
    
    # Show status
    docker compose -p "$project_name" ps
    
    print_status "Services started successfully!"
    print_info "To open a shell: $SCRIPT_NAME shell $project_dir"
}

# Stop command
cmd_stop() {
    local project_dir=$(get_project_dir "${1:-}")
    local project_name=$(get_project_name "$project_dir")
    
    print_status "Stopping services for project: $project_name"
    
    cd "$project_dir/.devcontainer"
    docker compose -p "$project_name" down
    
    print_status "Services stopped"
}

# Restart command
cmd_restart() {
    local project_dir="${1:-}"
    cmd_stop "$project_dir"
    sleep 2
    cmd_start "$project_dir"
}

# Status command
cmd_status() {
    local project_dir=$(get_project_dir "${1:-}")
    local project_name=$(get_project_name "$project_dir")
    
    print_status "Status for project: $project_name"
    
    cd "$project_dir/.devcontainer"
    docker compose -p "$project_name" ps
}

# Logs command
cmd_logs() {
    local project_dir=$(get_project_dir "${1:-}")
    local project_name=$(get_project_name "$project_dir")
    local service="${2:-}"
    
    cd "$project_dir/.devcontainer"
    
    if [[ -n "$service" ]]; then
        docker compose -p "$project_name" logs -f "$service"
    else
        docker compose -p "$project_name" logs -f
    fi
}

# Shell command
cmd_shell() {
    local project_dir=$(get_project_dir "${1:-}")
    local project_name=$(get_project_name "$project_dir")
    
    print_status "Opening shell in devcontainer..."
    
    # Check if container is running
    local container="${project_name}-devcontainer-1"
    
    if ! docker ps --format '{{.Names}}' | grep -q "^${container}$"; then
        print_error "Container $container is not running"
        print_info "Start it with: $SCRIPT_NAME start $project_dir"
        exit 1
    fi
    
    # Open interactive shell
    docker exec -it "$container" /bin/zsh
}

# Validate command
cmd_validate() {
    local project_dir=$(get_project_dir "${1:-}")
    
    print_status "Validating devcontainer configuration..."
    
    local errors=0
    
    # Check required files
    for file in docker-compose.yaml .env whitelist.txt dind-whitelist.txt; do
        if [[ ! -f "$project_dir/.devcontainer/$file" ]]; then
            print_error "Missing required file: $file"
            ((errors++))
        else
            print_status "✓ Found: $file"
        fi
    done
    
    # Check Docker
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker is not installed"
        ((errors++))
    else
        print_status "✓ Docker is installed"
    fi
    
    # Check Docker Compose
    if ! docker compose version >/dev/null 2>&1; then
        print_error "Docker Compose is not installed"
        ((errors++))
    else
        print_status "✓ Docker Compose is installed"
    fi
    
    # Check images
    for image in "claudecode/devcontainer:latest" "tinyproxy-whitelist:latest" "tinyproxy-dind:latest"; do
        if docker image inspect "$image" >/dev/null 2>&1; then
            print_status "✓ Image found: $image"
        else
            print_warning "Image not found: $image (will be pulled on start)"
        fi
    done
    
    if [[ $errors -eq 0 ]]; then
        print_status "Validation passed!"
    else
        print_error "Validation failed with $errors errors"
        exit 1
    fi
}

# Clean command
cmd_clean() {
    local project_dir=$(get_project_dir "${1:-}")
    local project_name=$(get_project_name "$project_dir")
    
    print_warning "This will remove all containers and volumes for project: $project_name"
    read -p "Are you sure? (y/N) " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "Cancelled"
        exit 0
    fi
    
    cd "$project_dir/.devcontainer"
    
    print_status "Stopping and removing containers..."
    docker compose -p "$project_name" down -v
    
    print_status "Removing project volumes..."
    docker volume ls --format '{{.Name}}' | grep "^${project_name}-" | xargs -r docker volume rm
    
    print_status "Clean complete"
}

# Version command
cmd_version() {
    echo "Claude DevContainer Manager v${VERSION}"
    echo "Copyright (c) 2024"
    echo ""
    echo "System information:"
    echo "  Docker: $(docker --version 2>/dev/null || echo "not installed")"
    echo "  Docker Compose: $(docker compose version 2>/dev/null || echo "not installed")"
    echo "  Templates: $(ls -d /usr/local/share/claude-devcontainer 2>/dev/null || echo "not installed")"
}

# Main command dispatcher
case "${1:-help}" in
    init)
        shift
        cmd_init "$@"
        ;;
    start)
        shift
        cmd_start "$@"
        ;;
    stop)
        shift
        cmd_stop "$@"
        ;;
    restart)
        shift
        cmd_restart "$@"
        ;;
    status)
        shift
        cmd_status "$@"
        ;;
    logs)
        shift
        cmd_logs "$@"
        ;;
    shell)
        shift
        cmd_shell "$@"
        ;;
    validate)
        shift
        cmd_validate "$@"
        ;;
    clean)
        shift
        cmd_clean "$@"
        ;;
    version)
        cmd_version
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        print_error "Unknown command: $1"
        show_usage
        exit 1
        ;;
esac